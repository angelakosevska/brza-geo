const generateUniqueRoomCode = require("../utils/generateUniqueRoomCode");
const Room = require("../models/Room");
const { getIO } = require("../sockets/ioInstance");

// Utility: –∏–∑–≤–ª–µ—á–∏ hostId –±–µ–∑ —Ä–∞–∑–ª–∏–∫–∞ –¥–∞–ª–∏ –µ ObjectId –∏–ª–∏ –ø–æ–ø—É–ª–∏—Ä–∞–Ω –æ–±—ò–µ–∫—Ç
const getHostId = (host) => (host?._id ? host._id.toString() : host.toString());

// –ö—Ä–µ–∏—Ä–∞—ö–µ –Ω–æ–≤–∞ —Å–æ–±–∞
exports.createRoom = async (req, res) => {
  try {
    const hostId = req.user.userId;
    let code;
    let exists = true;

    while (exists) {
      code = generateUniqueRoomCode().toUpperCase();
      exists = await Room.exists({ code });
    }

    const room = await Room.create({
      code,
      host: hostId,
      players: [hostId],
      rounds: 5,
      timer: 60,
      endMode: "ALL_SUBMIT",
      categories: [],
    });

    res.json({ room });
  } catch (err) {
    console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∫—Ä–µ–∏—Ä–∞—ö–µ —Å–æ–±–∞:", err);
    res.status(500).json({ message: "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∫—Ä–µ–∏—Ä–∞—ö–µ –Ω–∞ —Å–æ–±–∞—Ç–∞." });
  }
};

// –ü—Ä–∏–∫–ª—É—á—É–≤–∞—ö–µ –≤–æ —Å–æ–±–∞
exports.joinRoom = async (req, res) => {
  const { code } = req.body;
  try {
    const userId = req.user.userId;
    let room = await Room.findOne({ code: code.toUpperCase() });
    if (!room) {
      return res.status(404).json({ message: "–°–æ–±–∞—Ç–∞ –Ω–µ –µ –ø—Ä–æ–Ω–∞—ò–¥–µ–Ω–∞." });
    }

    if (!room.players.some((id) => id.toString() === userId)) {
      room.players.push(userId);
      await room.save();
    }

    room = await Room.findOne({ code: code.toUpperCase() })
      .populate("players")
      .populate("host");

    const io = getIO();
    io.to(code.toUpperCase()).emit("roomUpdated", { room });
    res.json({ room });
  } catch (err) {
    console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–∏–∫–ª—É—á—É–≤–∞—ö–µ:", err);
    res.status(500).json({ message: "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–∏–∫–ª—É—á—É–≤–∞—ö–µ –≤–æ —Å–æ–±–∞—Ç–∞." });
  }
};

// –ù–∞–ø—É—à—Ç–∞—ö–µ –Ω–∞ —Å–æ–±–∞
exports.leaveRoom = async (req, res) => {
  const { code } = req.body;
  try {
    const userId = req.user.userId;

    let room = await Room.findOne({ code });
    if (!room)
      return res.status(404).json({ message: "–°–æ–±–∞—Ç–∞ –Ω–µ –µ –ø—Ä–æ–Ω–∞—ò–¥–µ–Ω–∞." });

    // –ò–∑–±—Ä–∏—à–∏ –≥–æ –∏–≥—Ä–∞—á–æ—Ç –æ–¥ –ª–∏—Å—Ç–∞—Ç–∞
    room.players = room.players.filter((id) => id.toString() !== userId);

    // –ê–∫–æ —Ö–æ—Å—Ç–æ—Ç —ò–∞ –Ω–∞–ø—É—à—Ç–∞ —Å–æ–±–∞—Ç–∞ ‚Üí –ø—Ä–µ—Ñ—Ä–ª–∏ –Ω–∞ —Å–ª–µ–¥–Ω–∏–æ—Ç –∏–≥—Ä–∞—á
    if (room.host.toString() === userId) {
      if (room.players.length > 0) {
        room.host = room.players[0]; // –ø—Ä–≤–∏–æ—Ç –∏–≥—Ä–∞—á —Å—Ç–∞–Ω—É–≤–∞ –Ω–æ–≤ —Ö–æ—Å—Ç
      } else {
        room.host = null; // –Ω–µ–º–∞ –∏–≥—Ä–∞—á–∏ ‚Üí –Ω–µ–º–∞ —Ö–æ—Å—Ç
      }
    }

    await room.save();

    room = await Room.findOne({ code }).populate("players").populate("host");

    const io = getIO();
    io.to(code).emit("roomUpdated", { room });

    res.json({ message: "–£—Å–ø–µ—à–Ω–æ —ò–∞ –Ω–∞–ø—É—à—Ç–∏–≤—Ç–µ —Å–æ–±–∞—Ç–∞.", room });
    console.log("üëã –ò–≥—Ä–∞—á –∏–∑–ª–µ–∑–µ –æ–¥ —Å–æ–±–∞:", { code, userId });
  } catch (err) {
    console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –Ω–∞–ø—É—à—Ç–∞—ö–µ —Å–æ–±–∞:", err);
    res.status(500).json({ message: "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –Ω–∞–ø—É—à—Ç–∞—ö–µ –Ω–∞ —Å–æ–±–∞—Ç–∞." });
  }
};

// –ó–µ–ºa—ö–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∑–∞ —Å–æ–±–∞—Ç–∞
exports.getRoom = async (req, res) => {
  const { code } = req.params;
  try {
    const room = await Room.findOne({ code })
      .populate("players")
      .populate("host");
    if (!room)
      return res.status(404).json({ message: "–°–æ–±–∞—Ç–∞ –Ω–µ –µ –ø—Ä–æ–Ω–∞—ò–¥–µ–Ω–∞." });
    res.json({ room });
  } catch (err) {
    console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–µ–º–∞—ö–µ —Å–æ–±–∞:", err);
    res.status(500).json({ message: "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤—á–∏—Ç—É–≤–∞—ö–µ –Ω–∞ —Å–æ–±–∞—Ç–∞." });
  }
};

// –ê–∂—É—Ä–∏—Ä–∞—ö–µ –Ω–∞ –ø–æ–¥–µ—Å—É–≤–∞—ö–∞ (—Å–∞–º–æ —Ö–æ—Å—Ç)
exports.updateSettings = async (req, res) => {
  const { code, rounds, timer, endMode } = req.body;
  try {
    const roomCode = code.toUpperCase();
    let room = await Room.findOne({ code: roomCode })
      .populate("players")
      .populate("host");

    if (!room)
      return res.status(404).json({ message: "–°–æ–±–∞—Ç–∞ –Ω–µ –µ –ø—Ä–æ–Ω–∞—ò–¥–µ–Ω–∞." });

    const hostId = getHostId(room.host);
    if (hostId !== req.user.userId) {
      return res
        .status(403)
        .json({ message: "–°–∞–º–æ —Ö–æ—Å—Ç–æ—Ç –º–æ–∂–µ –¥–∞ –≥–∏ –∞–∂—É—Ä–∏—Ä–∞ –ø–æ–¥–µ—Å—É–≤–∞—ö–∞—Ç–∞." });
    }

    room.rounds = Math.max(1, Number(rounds || 5));
    room.timer = Math.max(3, Number(timer || 60));
    room.endMode = endMode === "PLAYER_STOP" ? "PLAYER_STOP" : "ALL_SUBMIT";
    await room.save();

    const io = getIO();
    io.to(roomCode).emit("roomUpdated", { room });

    res.json({ room });
  } catch (err) {
    console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∞–∂—É—Ä–∏—Ä–∞—ö–µ –ø–æ–¥–µ—Å—É–≤–∞—ö–∞:", err);
    res.status(500).json({ message: "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∞–∂—É—Ä–∏—Ä–∞—ö–µ –Ω–∞ –ø–æ–¥–µ—Å—É–≤–∞—ö–∞—Ç–∞." });
  }
};

// –ê–∂—É—Ä–∏—Ä–∞—ö–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Å–∞–º–æ —Ö–æ—Å—Ç)
exports.updateCategories = async (req, res) => {
  const { code, categories } = req.body;
  try {
    const roomCode = code.toUpperCase();
    let room = await Room.findOne({ code: roomCode })
      .populate("players")
      .populate("host");

    if (!room)
      return res.status(404).json({ message: "–°–æ–±–∞—Ç–∞ –Ω–µ –µ –ø—Ä–æ–Ω–∞—ò–¥–µ–Ω–∞." });

    const hostId = getHostId(room.host);
    if (hostId !== req.user.userId) {
      return res
        .status(403)
        .json({ message: "–°–∞–º–æ —Ö–æ—Å—Ç–æ—Ç –º–æ–∂–µ –¥–∞ –≥–∏ –∞–∂—É—Ä–∏—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏—Ç–µ." });
    }

    room.categories = categories;
    await room.save();

    const io = getIO();
    io.to(roomCode).emit("roomUpdated", { room });

    res.json({ room });
  } catch (err) {
    console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∞–∂—É—Ä–∏—Ä–∞—ö–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", err);
    res.status(500).json({ message: "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∞–∂—É—Ä–∏—Ä–∞—ö–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏—Ç–µ." });
  }
};
